@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Web;
@using GamesApp.Models;
@using GamesApp.Services;
@using System.Collections;
@using System.Collections.Generic;
@using System.Text.Json;
@inject JsonFileCardService CardService
@inject JsonFilePlayerService PlayerService

<div class="container new-game">
    <div class="row mb-3 justify-content-md-center">
        <div class="col text-center">
            <button class="btn btn-shuffle" data-toggle="modal" data-target="#directions">Directions</button>
        </div>
        <div class="col text-center">
            <a href="/" class="btn btn-shuffle">Edit Player</a>
        </div>
        <div class="col text-center">
            <button class="btn btn-shuffle" @onclick="e => ResetCards()">New Game</button>
        </div>
    </div>
</div>

<div id="directions" class="modal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Memory Game Directions</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="col directions">
                    <p>Click 2 cards to find Matching pairs.</p>
                    <p>If no match made, cards will turn facedown once you make subsequent 2 card choices as you continue to search for matches.</p>
                    <p>Earn points with each match made. No points for clicking same card twice.</p>
                    <p>The more matches you make the more points you will earn.</p>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="container player-list">
    <div class="row justify-content-md-center">
        @foreach (var player in PlayerService.GetPlayers())
        {
            <div class="col col-8">
                <h4>Player 1: @player.UserName</h4>
            </div>
            <div class="col col-4 text-right">
                <h4>Score: @player.Score</h4>
            </div>
        }
    </div>
</div>
<div class="container">
    <div class="row wrapper deck mb-5">
        @foreach (var card in CardService.GetCards().OrderBy(card => card.Order))
        {
            <div class="@RenderMatchedClasslist(card.Code, card.Clickable)" data-value="@card.Value" data-code="@card.Code" @onclick="e => FlipCard(card)">
                <div class="faces">
                    <div class="@RenderFaceCardClasslist(card.Code, card.Visible)"><img src="@card.FrontImage" /></div>
                    <div class="face back backon"></div>
                </div>
            </div>
        }
    </div>
</div>


@code {
    string selectedCardValue;
    List<string> hideImgClasslist = new List<string>(new string[] { "face", "front", "hide" });
    List<string> memoryCardClasses = new List<string>(new string[] { "memory-card", "matched" });
    List<string> frontImgClasses = new List<string>();
    string message { get; set; }
    List<Card> clickedCards = new List<Card>();
    int pointsEarned = 0;

    void FlipCard(Card card)
    {
        selectedCardValue = card.Value;
        frontImgClasses.Clear();

        var selected = CardService.GetCards().First(x => x.Code == card.Code);

        //set Visibility of card
        foreach (string cls in selected.Visible)
        {
            frontImgClasses.Add(cls);
        }

        if (frontImgClasses.Contains("hide"))
        {
            frontImgClasses.Remove("hide");
        }
        else
        {
            frontImgClasses.Add("hide");
        }


        //update card face class list for visibility
        RenderFaceCardClasslist(selected.Code, frontImgClasses);
        //update card visibility in db
        CardService.updateVisibilty(selected.Code, frontImgClasses);

        //see if match, adjust score and clear after 2 cards flipped
        clickedCards.Add(selected);
        if (clickedCards.Count == 2)
        {
            if(clickedCards[0].Code == clickedCards[1].Code)
            {
                clickedCards.Remove(clickedCards[1]);
                return;
            }
            var firstCardValue = clickedCards[0].Value;
            var secondCardValue = clickedCards[1].Value;

            if (firstCardValue == secondCardValue)
            {
                pointsEarned += 3;
                //update player score in db
                PlayerService.updatePlayerScore("One", pointsEarned);

                List<string> matchedImgClasslist = new List<string>(new string[] { "face", "front", "matched" });
                foreach (var matchedCard in clickedCards)
                {
                    CardService.updateVisibilty(matchedCard.Code, matchedImgClasslist);
                    CardService.updateClickable(matchedCard.Code, memoryCardClasses);

                }
            }
            // make matched card unclickable
            RenderMatchedClasslist(card.Code, memoryCardClasses);
        }

        //hide all cards once clicked array count is at 2

        if (clickedCards.Count == 2)
        {
            clickedCards.Clear();
            HideAllCards();

        }

    }

    private void ResetCards()
    {
        List<string> resetMemoryCardClasses = new List<string>(new string[] { "memory-card" });
        foreach (var card in CardService.GetCards())
        {
            CardService.updateVisibilty(card.Code, hideImgClasslist);
            CardService.updateClickable(card.Code, resetMemoryCardClasses);
            CardService.updateCardOrder();
        }

        PlayerService.updatePlayerScore("One", -1);
        pointsEarned = 0;

    }


    private string RenderMatchedClasslist(string code, List<string> list)
    {

        var matchedCardClasslist = string.Join(" ", list);

        matchedCardClasslist += $" {code}";

        return matchedCardClasslist;
    }

    private string RenderFaceCardClasslist(string code, List<string> list)
    {
        var faceCardClasslist = string.Join(" ", list);

        faceCardClasslist += $" {code}";

        return faceCardClasslist;
    }

    async void HideAllCards()
    {
        await Task.Delay(1);
        foreach (var card in CardService.GetCards())
        {
            if (card.Clickable.Contains("matched"))
            {
                continue;
            }
            CardService.updateVisibilty(card.Code, hideImgClasslist);
        }
    }

}